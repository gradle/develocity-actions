name: Publish Maven Build Scans
description: Publish Maven Build Scans

inputs:
  develocity-url:
    description: 'Develocity URL'
    required: true
  develocity-access-key:
    description: 'Develocity access key'
    required: false
  develocity-allow-untrusted:
    description: 'Develocity allow-untrusted flag'
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Download Build Scans
      uses: dawidd6/action-download-artifact@v2
      env:
        ARTIFACT_NAME: 'maven-build-scan-data'
      with:
        run_id: ${{ github.event.workflow_run.id }}
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_NAME }}
    - name: Restore Build Scans
      env:
        ARTIFACT_NAME: 'maven-build-scan-data'
        BUILD_SCAN_DIR: '~/.m2/.gradle-enterprise/build-scan-data/'
      run: |
        mkdir -p ${{ env.BUILD_SCAN_DIR }}
        cp -r ${{ env.ARTIFACT_NAME }}/* ${{ env.BUILD_SCAN_DIR }}
      shell: bash
    - name: Create Maven Project Structure
      env:
        PROJECT_DIR: 'maven-build-scan-publisher'
      run: |
        mkdir -p ${{ env.PROJECT_DIR }}/.mvn

        cat > ${{ env.PROJECT_DIR }}/pom.xml << EOF
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.gradle</groupId>
          <artifactId>${{ env.PROJECT_DIR }}</artifactId>
          <version>1.0</version>
          <name>Maven Build Scan Publisher</name>
        </project>
        EOF

        cat > ${{ env.PROJECT_DIR }}/.mvn/extensions.xml.template << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <extensions>
          <extension>
            <groupId>com.gradle</groupId>
            <artifactId>gradle-enterprise-maven-extension</artifactId>
            <version>REPLACE_ME</version>
          </extension>
        </extensions>
        EOF

        cat > ${{ env.PROJECT_DIR }}/.mvn/gradle-enterprise.xml << EOF
        <?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
        <gradleEnterprise 
          xmlns="https://www.gradle.com/gradle-enterprise-maven" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://www.gradle.com/gradle-enterprise-maven https://www.gradle.com/schema/gradle-enterprise-maven.xsd">
          <server>
            <url>${{ inputs.develocity-url }}</url>
            <allowUntrusted>${{ inputs.develocity-allow-untrusted }}</allowUntrusted>
          </server>
        </gradleEnterprise>
        EOF
      shell: bash
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Publish build scan
      env:
        BUILD_SCAN_DIR: '~/.m2/.gradle-enterprise/build-scan-data/'
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ inputs.develocity-access-key }}
        PROJECT_DIR: 'maven-build-scan-publisher'
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        set +e
        
        if [ -d ${{ env.BUILD_SCAN_DIR }} ]; then
          publishedScans=1
          scans=$(find ${{ env.BUILD_SCAN_DIR }} -type f -name "scan.scan")
          nbScans=$(echo "${scans}" | wc -l)

          # iterate over Build Scans
          for scan in ${scans}; do        
            echo "Publishing Build Scan $((publishedScans++))/${nbScans}"

            # assuming directory name is ${{ env.BUILD_SCAN_DIR }}/<VERSION>/previous/<UUID>/scan.scan
            currentExtensionVersion=$(basename ${scan%/previous/*})

            # set current version in project
            sed "s/REPLACE_ME/${currentExtensionVersion}/g" .mvn/extensions.xml.template > .mvn/extensions.xml
               
            # publish build scan
            mvn gradle-enterprise:build-scan-publish-previous
          done
        fi
      shell: bash
